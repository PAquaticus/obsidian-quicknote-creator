/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => QuickNotePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  targetFolder: ""
};
var QuickNotePlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addRibbonIcon("file-plus", "Create Quick Note", (evt) => {
      this.createQuickNote();
    });
    this.addCommand({
      id: "create-quick-note",
      name: "Create Quick Note",
      callback: () => {
        this.createQuickNote();
      }
    });
    this.addCommand({
      id: "create-quick-note-hotkey",
      name: "Create Quick Note (Hotkey)",
      hotkeys: [{ modifiers: ["Mod", "Shift"], key: "n" }],
      callback: () => {
        this.createQuickNote();
      }
    });
    this.addSettingTab(new QuickNoteSettingTab(this.app, this));
  }
  async createQuickNote() {
    if (!this.settings.targetFolder) {
      new import_obsidian.Notice("Please set a target folder in settings");
      return;
    }
    try {
      const targetFolder = this.settings.targetFolder;
      const folderExists = this.app.vault.getAbstractFileByPath(targetFolder);
      if (!folderExists) {
        await this.app.vault.createFolder(targetFolder);
      }
      const files = this.app.vault.getFiles().filter(
        (file) => file.path.startsWith(targetFolder + "/") && file.path.split("/").length === targetFolder.split("/").length + 1
      );
      let maxNum = 0;
      files.forEach((file) => {
        const fileName2 = file.basename;
        const match = fileName2.match(/^(\d+)(\s|$)/);
        if (match) {
          const num = parseInt(match[1]);
          if (num > maxNum) {
            maxNum = num;
          }
        }
      });
      const fileName = `${maxNum + 1}.md`;
      const filePath = `${targetFolder}/${fileName}`;
      const content = ``;
      const newFile = await this.app.vault.create(filePath, content);
      const leaf = this.app.workspace.getLeaf("tab");
      await leaf.openFile(newFile);
      new import_obsidian.Notice(`Created: ${fileName}`);
    } catch (error) {
      console.error("Error creating note:", error);
      new import_obsidian.Notice("Error creating note. Check console for details.");
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var QuickNoteSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Quick Note Creator Settings" });
    let folderOptions = { "": "" };
    this.app.vault.getAllFolders(true).forEach((folder) => {
      folderOptions[folder.path] = folder.path;
    });
    new import_obsidian.Setting(containerEl).setName("Target Folder").setDesc("Folder where numbered notes will be created").addDropdown(
      (dropdownComponent) => {
        var _a;
        return dropdownComponent.setValue((_a = this.plugin.settings.targetFolder) != null ? _a : "").addOptions(folderOptions).onChange(async (value) => {
          this.plugin.settings.targetFolder = value;
          await this.plugin.saveSettings();
        });
      }
    );
    containerEl.createEl("p", {
      text: "Note: Files will be created as numbered files (1.md, 2.md, 3.md, etc.) and opened in new tabs with cursor positioned in the header."
    });
    containerEl.createEl("p", {
      text: `You can assign a custom hotkey to "Create Quick Note (Hotkey)" in Obsidian's hotkey settings. Default is Cmd/Ctrl + Shift + N.`
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
